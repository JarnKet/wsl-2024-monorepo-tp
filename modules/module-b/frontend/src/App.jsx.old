import React, { useState, useEffect } from 'react';
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
  Link,
  useNavigate,
  useParams
} from 'react-router-dom';

// API Configuration
const API_BASE = 'http://localhost:3001/api';

// API Helper Functions
const api = {
  async request(endpoint, options = {}) {
    const url = `${API_BASE}${endpoint}`;
    const config = {
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    if (options.body && !(options.body instanceof FormData)) {
      config.body = JSON.stringify(options.body);
    } else if (options.body instanceof FormData) {
      delete config.headers['Content-Type'];
      config.body = options.body;
    }

    const response = await fetch(url, config);

    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: 'Network error' }));
      throw new Error(error.error || 'Request failed');
    }

    return response.json();
  },

  // Auth
  login: (passphrase) => api.request('/auth/login', { method: 'POST', body: { passphrase } }),
  logout: () => api.request('/auth/logout', { method: 'POST' }),
  getAuthStatus: () => api.request('/auth/status'),

  // Companies
  getCompanies: () => api.request('/companies'),
  getActiveCompanies: () => api.request('/companies/active'),
  getDeactivatedCompanies: () => api.request('/companies/deactivated'),
  getCompany: (id) => api.request(`/companies/${id}`),
  getCompanyProducts: (id) => api.request(`/companies/${id}/products`),
  createCompany: (data) => api.request('/companies', { method: 'POST', body: data }),
  updateCompany: (id, data) => api.request(`/companies/${id}`, { method: 'PUT', body: data }),

  // Products
  getProducts: (params = {}) => {
    const query = new URLSearchParams(params).toString();
    return api.request(`/products${query ? '?' + query : ''}`);
  },
  getAdminProducts: () => api.request('/admin/products'),
  getProduct: (gtin) => api.request(`/products/${gtin}`),
  getAdminProduct: (gtin) => api.request(`/admin/products/${gtin}`),
  getPublicProduct: (gtin) => api.request(`/public/products/${gtin}`),
  createProduct: (data) => api.request('/products', { method: 'POST', body: data }),
  updateProduct: (gtin, data) => api.request(`/products/${gtin}`, { method: 'PUT', body: data }),
  deleteProduct: (gtin) => api.request(`/products/${gtin}`, { method: 'DELETE' }),
  removeProductImage: (gtin) => api.request(`/products/${gtin}/image`, { method: 'DELETE' }),

  // GTIN Verification
  verifyGTINs: (gtins) => api.request('/products/verify', { method: 'POST', body: { gtins } }),
};

// Auth Context
const AuthContext = React.createContext();

const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    try {
      const status = await api.getAuthStatus();
      setIsAuthenticated(status.authenticated);
    } catch (error) {
      setIsAuthenticated(false);
    } finally {
      setLoading(false);
    }
  };

  const login = async (passphrase) => {
    try {
      await api.login(passphrase);
      setIsAuthenticated(true);
      return true;
    } catch (error) {
      throw error;
    }
  };

  const logout = async () => {
    try {
      await api.logout();
      setIsAuthenticated(false);
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

const useAuth = () => {
  const context = React.useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Components

// Protected Route Component
const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return <div className="flex items-center justify-center h-screen">
      <div className="w-32 h-32 border-b-2 border-blue-500 rounded-full animate-spin"></div>
    </div>;
  }

  return isAuthenticated ? children : <Navigate to="/login" />;
};

// Navigation Component
const Navigation = () => {
  const { isAuthenticated, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = async () => {
    await logout();
    navigate('/');
  };

  return (
    <nav className="text-white bg-blue-600 shadow-lg">
      <div className="px-4 mx-auto max-w-7xl">
        <div className="flex items-center justify-between h-16">
          <Link to="/" className="text-xl font-bold">
            Products Management System
          </Link>

          <div className="flex space-x-4">
            <Link to="/gtin-verify" className="px-3 py-2 rounded hover:bg-blue-700">
              GTIN Verification
            </Link>

            {isAuthenticated ? (
              <>
                <Link to="/admin/companies" className="px-3 py-2 rounded hover:bg-blue-700">
                  Companies
                </Link>
                <Link to="/admin/products" className="px-3 py-2 rounded hover:bg-blue-700">
                  Products
                </Link>
                <button
                  onClick={handleLogout}
                  className="px-3 py-2 rounded hover:bg-blue-700"
                >
                  Logout
                </button>
              </>
            ) : (
              <Link to="/login" className="px-3 py-2 rounded hover:bg-blue-700">
                Admin Login
              </Link>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

// Login Page
const LoginPage = () => {
  const [passphrase, setPassphrase] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      await login(passphrase);
      navigate('/admin/companies');
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="w-full max-w-md space-y-8">
        <div>
          <h2 className="mt-6 text-3xl font-extrabold text-center text-gray-900">
            Admin Login
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="passphrase" className="sr-only">
              Passphrase
            </label>
            <input
              id="passphrase"
              name="passphrase"
              type="password"
              required
              value={passphrase}
              onChange={(e) => setPassphrase(e.target.value)}
              className="relative block w-full px-3 py-2 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Enter passphrase"
            />
          </div>

          {error && (
            <div className="text-sm text-center text-red-600">{error}</div>
          )}

          <div>
            <button
              type="submit"
              disabled={loading}
              className="relative flex justify-center w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md group hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// Home Page
const HomePage = () => {
  return (
    <div className="max-w-4xl px-4 py-8 mx-auto">
      <h1 className="mb-8 text-3xl font-bold text-gray-900">
        Welcome to Products Management System
      </h1>

      <div className="grid gap-6 md:grid-cols-2">
        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">GTIN Verification</h2>
          <p className="mb-4 text-gray-600">
            Verify multiple GTIN codes to check if they are registered and valid.
          </p>
          <Link
            to="/gtin-verify"
            className="inline-block px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700"
          >
            Verify GTINs
          </Link>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Admin Access</h2>
          <p className="mb-4 text-gray-600">
            Access the management system to handle companies and products.
          </p>
          <Link
            to="/login"
            className="inline-block px-4 py-2 text-white bg-green-600 rounded hover:bg-green-700"
          >
            Admin Login
          </Link>
        </div>
      </div>
    </div>
  );
};

// GTIN Verification Page
const GTINVerificationPage = () => {
  const [gtinInput, setGtinInput] = useState('');
  const [results, setResults] = useState([]);
  const [allValid, setAllValid] = useState(false);
  const [loading, setLoading] = useState(false);
  const [hasResults, setHasResults] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const gtins = gtinInput.split('\n').map(line => line.trim()).filter(line => line);
      const response = await api.verifyGTINs(gtins);
      setResults(response.results);
      setAllValid(response.allValid);
      setHasResults(true);
    } catch (error) {
      console.error('Verification error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-4xl px-4 py-8 mx-auto">
      <h1 className="mb-8 text-3xl font-bold text-gray-900">
        GTIN Bulk Verification
      </h1>

      <form onSubmit={handleSubmit} className="mb-8">
        <div className="mb-4">
          <label htmlFor="gtin-input" className="block mb-2 text-sm font-medium text-gray-700">
            Enter GTIN codes (one per line)
          </label>
          <textarea
            id="gtin-input"
            value={gtinInput}
            onChange={(e) => setGtinInput(e.target.value)}
            rows={10}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            placeholder="3000123456789&#10;3000987654321&#10;3001234567890"
          />
        </div>

        <button
          type="submit"
          disabled={loading || !gtinInput.trim()}
          className="px-6 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50"
        >
          {loading ? 'Verifying...' : 'Verify GTINs'}
        </button>
      </form>

      {hasResults && (
        <div className="p-6 bg-white rounded-lg shadow">
          {allValid && (
            <div className="flex items-center px-4 py-3 mb-4 text-green-700 bg-green-100 border border-green-400 rounded">
              <span className="mr-2 text-green-600">✓</span>
              All valid
            </div>
          )}

          <h2 className="mb-4 text-xl font-semibold">Verification Results</h2>

          <div className="space-y-2">
            {results.map((result, index) => (
              <div
                key={index}
                className={`flex items-center justify-between p-3 rounded ${
                  result.valid
                    ? 'bg-green-50 border border-green-200'
                    : 'bg-red-50 border border-red-200'
                }`}
              >
                <span className="font-mono">{result.gtin}</span>
                <span className={`font-medium ${
                  result.valid ? 'text-green-700' : 'text-red-700'
                }`}>
                  {result.valid ? '✓ Valid' : '✗ Invalid'}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// Public Product Page
const PublicProductPage = () => {
  const { gtin } = useParams();
  const [product, setProduct] = useState(null);
  const [language, setLanguage] = useState('en');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchProduct();
  }, [gtin]);

  const fetchProduct = async () => {
    try {
      const data = await api.getPublicProduct(gtin);
      setProduct(data);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center h-screen">
      <div className="w-32 h-32 border-b-2 border-blue-500 rounded-full animate-spin"></div>
    </div>;
  }

  if (error) {
    return <div className="max-w-4xl px-4 py-8 mx-auto">
      <div className="px-4 py-3 text-red-700 bg-red-100 border border-red-400 rounded">
        {error}
      </div>
    </div>;
  }

  return (
    <div className="max-w-4xl px-4 py-8 mx-auto" lang={language}>
      <div className="overflow-hidden bg-white rounded-lg shadow-lg">
        <div className="p-6">
          <div className="flex items-start justify-between mb-6">
            <h1 className="text-3xl font-bold text-gray-900">
              {product.name[language]}
            </h1>

            <div className="flex space-x-2">
              <button
                onClick={() => setLanguage('en')}
                className={`px-3 py-1 rounded ${
                  language === 'en'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-200 text-gray-700'
                }`}
              >
                EN
              </button>
              <button
                onClick={() => setLanguage('fr')}
                className={`px-3 py-1 rounded ${
                  language === 'fr'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-200 text-gray-700'
                }`}
              >
                FR
              </button>
            </div>
          </div>

          <div className="grid gap-8 md:grid-cols-2">
            <div>
              {product.imagePath ? (
                <img
                  src={`${API_BASE.replace('/api', '')}${product.imagePath}`}
                  alt={product.name[language]}
                  className="object-cover w-full h-64 rounded-lg"
                />
              ) : (
                <div className="flex items-center justify-center w-full h-64 bg-gray-200 rounded-lg">
                  <span className="text-gray-500">No image available</span>
                </div>
              )}
            </div>

            <div className="space-y-4">
              <div>
                <h3 className="text-sm font-medium text-gray-500">Company</h3>
                <p className="text-lg text-gray-900">{product.company.companyName}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">GTIN</h3>
                <p className="font-mono text-lg text-gray-900">{product.gtin}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">Weight</h3>
                <p className="text-lg text-gray-900">
                  {product.weight.gross} {product.weight.unit} (gross)
                </p>
                <p className="text-lg text-gray-900">
                  {product.weight.net} {product.weight.unit} (net)
                </p>
              </div>
            </div>
          </div>

          <div className="mt-8">
            <h3 className="mb-4 text-lg font-medium text-gray-900">Description</h3>
            <p className="leading-relaxed text-gray-700">
              {product.description[language]}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Companies List Page
const CompaniesListPage = () => {
  const [companies, setCompanies] = useState([]);
  const [deactivatedCompanies, setDeactivatedCompanies] = useState([]);
  const [showDeactivated, setShowDeactivated] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchCompanies();
  }, []);

  const fetchCompanies = async () => {
    try {
      const [active, deactivated] = await Promise.all([
        api.getActiveCompanies(),
        api.getDeactivatedCompanies()
      ]);
      setCompanies(active);
      setDeactivatedCompanies(deactivated);
    } catch (error) {
      console.error('Error fetching companies:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center h-screen">
      <div className="w-32 h-32 border-b-2 border-blue-500 rounded-full animate-spin"></div>
    </div>;
  }

  const displayCompanies = showDeactivated ? deactivatedCompanies : companies;

  return (
    <div className="max-w-6xl px-4 py-8 mx-auto">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-gray-900">
          {showDeactivated ? 'Deactivated Companies' : 'Companies Management'}
        </h1>

        <div className="flex space-x-4">
          <button
            onClick={() => setShowDeactivated(!showDeactivated)}
            className="px-4 py-2 text-white bg-gray-600 rounded hover:bg-gray-700"
          >
            {showDeactivated ? 'Show Active' : 'Show Deactivated'}
          </button>
          <Link
            to="/admin/companies/new"
            className="px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700"
          >
            Add New Company
          </Link>
        </div>
      </div>

      <div className="overflow-hidden bg-white rounded-lg shadow">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Company Name
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Address
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Contact
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Status
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {displayCompanies.map((company) => (
              <tr key={company.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900">
                    {company.company_name}
                  </div>
                </td>
                <td className="px-6 py-4">
                  <div className="text-sm text-gray-900">
                    {company.address}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">
                    {company.telephone}
                  </div>
                  <div className="text-sm text-gray-500">
                    {company.email}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    !company.is_deactivated
                      ? 'bg-green-100 text-green-800'
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {!company.is_deactivated ? 'Active' : 'Deactivated'}
                  </span>
                </td>
                <td className="px-6 py-4 text-sm font-medium whitespace-nowrap">
                  <Link
                    to={`/admin/companies/${company.id}`}
                    className="mr-4 text-blue-600 hover:text-blue-900"
                  >
                    View
                  </Link>
                  <Link
                    to={`/admin/companies/${company.id}/edit`}
                    className="text-indigo-600 hover:text-indigo-900"
                  >
                    Edit
                  </Link>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {displayCompanies.length === 0 && (
          <div className="py-8 text-center text-gray-500">
            No {showDeactivated ? 'deactivated' : 'active'} companies found
          </div>
        )}
      </div>
    </div>
  );
};

// Company Detail Page
const CompanyDetailPage = () => {
  const { id } = useParams();
  const [company, setCompany] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchCompanyData();
  }, [id]);

  const fetchCompanyData = async () => {
    try {
      const [companyData, productsData] = await Promise.all([
        api.getCompany(id),
        api.getCompanyProducts(id)
      ]);
      setCompany(companyData);
      setProducts(productsData);
    } catch (error) {
      console.error('Error fetching company data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center h-screen">
      <div className="w-32 h-32 border-b-2 border-blue-500 rounded-full animate-spin"></div>
    </div>;
  }

  if (!company) {
    return <div className="max-w-4xl px-4 py-8 mx-auto">
      <div className="px-4 py-3 text-red-700 bg-red-100 border border-red-400 rounded">
        Company not found
      </div>
    </div>;
  }

  return (
    <div className="max-w-6xl px-4 py-8 mx-auto">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-gray-900">
          {company.company_name}
        </h1>
        <Link
          to={`/admin/companies/${company.id}/edit`}
          className="px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700"
        >
          Edit Company
        </Link>
      </div>

      <div className="grid gap-8 mb-8 md:grid-cols-2">
        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Company Information</h2>
          <div className="space-y-3">
            <div>
              <span className="font-medium">Address:</span>
              <p className="text-gray-700">{company.address}</p>
            </div>
            <div>
              <span className="font-medium">Telephone:</span>
              <p className="text-gray-700">{company.telephone}</p>
            </div>
            <div>
              <span className="font-medium">Email:</span>
              <p className="text-gray-700">{company.email}</p>
            </div>
            <div>
              <span className="font-medium">Status:</span>
              <span className={`ml-2 px-2 py-1 text-xs font-semibold rounded-full ${
                !company.is_deactivated
                  ? 'bg-green-100 text-green-800'
                  : 'bg-red-100 text-red-800'
              }`}>
                {!company.is_deactivated ? 'Active' : 'Deactivated'}
              </span>
            </div>
          </div>
        </div>

        <div className="space-y-6">
          <div className="p-6 bg-white rounded-lg shadow">
            <h3 className="mb-3 text-lg font-semibold">Owner Information</h3>
            <div className="space-y-2">
              <div><span className="font-medium">Name:</span> {company.owner_name}</div>
              <div><span className="font-medium">Mobile:</span> {company.owner_mobile}</div>
              <div><span className="font-medium">Email:</span> {company.owner_email}</div>
            </div>
          </div>

          <div className="p-6 bg-white rounded-lg shadow">
            <h3 className="mb-3 text-lg font-semibold">Contact Information</h3>
            <div className="space-y-2">
              <div><span className="font-medium">Name:</span> {company.contact_name}</div>
              <div><span className="font-medium">Mobile:</span> {company.contact_mobile}</div>
              <div><span className="font-medium">Email:</span> {company.contact_email}</div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold">Associated Products</h2>
        </div>

        {products.length === 0 ? (
          <div className="p-6 text-center text-gray-500">
            No products found for this company
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    GTIN
                  </th>
                  <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Product Name
                  </th>
                  <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Brand
                  </th>
                  <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Status
                  </th>
                  <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {products.map((product) => (
                  <tr key={product.gtin} className="hover:bg-gray-50">
                    <td className="px-6 py-4 font-mono text-sm whitespace-nowrap">
                      {product.gtin}
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm font-medium text-gray-900">
                        {product.name_en}
                      </div>
                      <div className="text-sm text-gray-500">
                        {product.name_fr}
                      </div>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-900 whitespace-nowrap">
                      {product.brand}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        !product.is_hidden
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {product.is_hidden ? 'Hidden' : 'Visible'}
                      </span>
                    </td>
                    <td className="px-6 py-4 text-sm font-medium whitespace-nowrap">
                      <Link
                        to={`/admin/products/${product.gtin}`}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        View
                      </Link>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
};

// Company Form Page
const CompanyFormPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isEditing = !!id;

  const [formData, setFormData] = useState({
    company_name: '',
    address: '',
    telephone: '',
    email: '',
    owner_name: '',
    owner_mobile: '',
    owner_email: '',
    contact_name: '',
    contact_mobile: '',
    contact_email: '',
    is_deactivated: false
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (isEditing) {
      fetchCompany();
    }
  }, [id, isEditing]);

  const fetchCompany = async () => {
    try {
      const company = await api.getCompany(id);
      setFormData(company);
    } catch (error) {
      setError('Error loading company data');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (isEditing) {
        await api.updateCompany(id, formData);
      } else {
        await api.createCompany(formData);
      }
      navigate('/admin/companies');
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  return (
    <div className="max-w-4xl px-4 py-8 mx-auto">
      <h1 className="mb-8 text-3xl font-bold text-gray-900">
        {isEditing ? 'Edit Company' : 'Add New Company'}
      </h1>

      {error && (
        <div className="px-4 py-3 mb-6 text-red-700 bg-red-100 border border-red-400 rounded">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-8">
        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Company Information</h2>
          <div className="grid gap-6 md:grid-cols-2">
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Company Name *
              </label>
              <input
                type="text"
                name="company_name"
                value={formData.company_name}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Company Telephone *
              </label>
              <input
                type="tel"
                name="telephone"
                value={formData.telephone}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="md:col-span-2">
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Company Address *
              </label>
              <textarea
                name="address"
                value={formData.address}
                onChange={handleChange}
                required
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="md:col-span-2">
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Company Email *
              </label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Owner Information</h2>
          <div className="grid gap-6 md:grid-cols-2">
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Owner Name *
              </label>
              <input
                type="text"
                name="owner_name"
                value={formData.owner_name}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Owner Mobile *
              </label>
              <input
                type="tel"
                name="owner_mobile"
                value={formData.owner_mobile}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="md:col-span-2">
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Owner Email *
              </label>
              <input
                type="email"
                name="owner_email"
                value={formData.owner_email}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Contact Information</h2>
          <div className="grid gap-6 md:grid-cols-2">
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Contact Name *
              </label>
              <input
                type="text"
                name="contact_name"
                value={formData.contact_name}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Contact Mobile *
              </label>
              <input
                type="tel"
                name="contact_mobile"
                value={formData.contact_mobile}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="md:col-span-2">
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Contact Email *
              </label>
              <input
                type="email"
                name="contact_email"
                value={formData.contact_email}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        {isEditing && (
          <div className="p-6 bg-white rounded-lg shadow">
            <h2 className="mb-4 text-xl font-semibold">Status</h2>
            <div className="flex items-center">
              <input
                type="checkbox"
                id="is_deactivated"
                name="is_deactivated"
                checked={formData.is_deactivated}
                onChange={handleChange}
                className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="is_deactivated" className="block ml-2 text-sm text-gray-900">
                Company is deactivated
              </label>
            </div>
          </div>
        )}

        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={() => navigate('/admin/companies')}
            className="px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? 'Saving...' : (isEditing ? 'Update Company' : 'Create Company')}
          </button>
        </div>
      </form>
    </div>
  );
};

// Products List Page
const ProductsListPage = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      const data = await api.getAdminProducts();
      setProducts(data);
    } catch (error) {
      console.error('Error fetching products:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (gtin) => {
    if (!confirm('Are you sure you want to permanently delete this product?')) {
      return;
    }

    try {
      await api.deleteProduct(gtin);
      setProducts(products.filter(p => p.gtin !== gtin));
    } catch (error) {
      alert('Error deleting product: ' + error.message);
    }
  };

  const filteredProducts = products.filter(product =>
    product.name.en.toLowerCase().includes(searchQuery.toLowerCase()) ||
    product.name.fr.toLowerCase().includes(searchQuery.toLowerCase()) ||
    product.gtin.includes(searchQuery) ||
    product.brand.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (loading) {
    return <div className="flex items-center justify-center h-screen">
      <div className="w-32 h-32 border-b-2 border-blue-500 rounded-full animate-spin"></div>
    </div>;
  }

  return (
    <div className="px-4 py-8 mx-auto max-w-7xl">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Products Management</h1>
        <Link
          to="/admin/products/new"
          className="px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700"
        >
          Add New Product
        </Link>
      </div>

      <div className="mb-6">
        <input
          type="text"
          placeholder="Search products..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full max-w-md px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <div className="overflow-hidden bg-white rounded-lg shadow">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                GTIN
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Product Name
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Brand
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Company
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Status
              </th>
              <th className="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredProducts.map((product) => (
              <tr key={product.gtin} className="hover:bg-gray-50">
                <td className="px-6 py-4 font-mono text-sm whitespace-nowrap">
                  {product.gtin}
                </td>
                <td className="px-6 py-4">
                  <div className="text-sm font-medium text-gray-900">
                    {product.name.en}
                  </div>
                  <div className="text-sm text-gray-500">
                    {product.name.fr}
                  </div>
                </td>
                <td className="px-6 py-4 text-sm text-gray-900 whitespace-nowrap">
                  {product.brand}
                </td>
                <td className="px-6 py-4 text-sm text-gray-900 whitespace-nowrap">
                  {product.company.companyName}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    !product.isHidden
                      ? 'bg-green-100 text-green-800'
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {product.isHidden ? 'Hidden' : 'Visible'}
                  </span>
                </td>
                <td className="px-6 py-4 text-sm font-medium whitespace-nowrap">
                  <Link
                    to={`/admin/products/${product.gtin}`}
                    className="mr-4 text-blue-600 hover:text-blue-900"
                  >
                    View
                  </Link>
                  <Link
                    to={`/admin/products/${product.gtin}/edit`}
                    className="mr-4 text-indigo-600 hover:text-indigo-900"
                  >
                    Edit
                  </Link>
                  {product.isHidden && (
                    <button
                      onClick={() => handleDelete(product.gtin)}
                      className="text-red-600 hover:text-red-900"
                    >
                      Delete
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {filteredProducts.length === 0 && (
          <div className="py-8 text-center text-gray-500">
            {searchQuery ? 'No products match your search' : 'No products found'}
          </div>
        )}
      </div>
    </div>
  );
};

// Product Detail Page
const ProductDetailPage = () => {
  const { gtin } = useParams();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchProduct();
  }, [gtin]);

  const fetchProduct = async () => {
    try {
      const data = await api.getAdminProduct(gtin);
      setProduct(data);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteImage = async () => {
    if (!confirm('Are you sure you want to remove this image?')) {
      return;
    }

    try {
      await api.removeProductImage(gtin);
      setProduct(prev => ({ ...prev, imagePath: null }));
    } catch (error) {
      alert('Error removing image: ' + error.message);
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center h-screen">
      <div className="w-32 h-32 border-b-2 border-blue-500 rounded-full animate-spin"></div>
    </div>;
  }

  if (error) {
    return <div className="max-w-4xl px-4 py-8 mx-auto">
      <div className="px-4 py-3 text-red-700 bg-red-100 border border-red-400 rounded">
        {error}
      </div>
    </div>;
  }

  return (
    <div className="max-w-6xl px-4 py-8 mx-auto">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-gray-900">
          {product.name.en}
        </h1>
        <div className="flex space-x-4">
          <Link
            to={`/admin/products/${product.gtin}/edit`}
            className="px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700"
          >
            Edit Product
          </Link>
          <Link
            to={`/01/${product.gtin}`}
            target="_blank"
            className="px-4 py-2 text-white bg-green-600 rounded hover:bg-green-700"
          >
            View Public Page
          </Link>
        </div>
      </div>

      <div className="grid gap-8 mb-8 md:grid-cols-2">
        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Product Image</h2>
          {product.imagePath ? (
            <div>
              <img
                src={`${API_BASE.replace('/api', '')}${product.imagePath}`}
                alt={product.name.en}
                className="object-cover w-full h-64 mb-4 rounded-lg"
              />
              <button
                onClick={handleDeleteImage}
                className="px-4 py-2 text-white bg-red-600 rounded hover:bg-red-700"
              >
                Remove Image
              </button>
            </div>
          ) : (
            <div className="flex items-center justify-center w-full h-64 bg-gray-200 rounded-lg">
              <span className="text-gray-500">No image uploaded</span>
            </div>
          )}
        </div>

        <div className="space-y-6">
          <div className="p-6 bg-white rounded-lg shadow">
            <h3 className="mb-4 text-lg font-semibold">Basic Information</h3>
            <div className="space-y-3">
              <div>
                <span className="font-medium">GTIN:</span>
                <p className="font-mono text-gray-700">{product.gtin}</p>
              </div>
              <div>
                <span className="font-medium">Brand:</span>
                <p className="text-gray-700">{product.brand}</p>
              </div>
              <div>
                <span className="font-medium">Country of Origin:</span>
                <p className="text-gray-700">{product.countryOfOrigin}</p>
              </div>
              <div>
                <span className="font-medium">Company:</span>
                <p className="text-gray-700">{product.company.companyName}</p>
              </div>
              <div>
                <span className="font-medium">Status:</span>
                <span className={`ml-2 px-2 py-1 text-xs font-semibold rounded-full ${
                  !product.isHidden
                    ? 'bg-green-100 text-green-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {product.isHidden ? 'Hidden' : 'Visible'}
                </span>
              </div>
            </div>
          </div>

          <div className="p-6 bg-white rounded-lg shadow">
            <h3 className="mb-4 text-lg font-semibold">Weight Information</h3>
            <div className="space-y-2">
              <div>
                <span className="font-medium">Gross Weight:</span>
                <span className="ml-2">{product.weight.gross} {product.weight.unit}</span>
              </div>
              <div>
                <span className="font-medium">Net Weight:</span>
                <span className="ml-2">{product.weight.net} {product.weight.unit}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="grid gap-8 md:grid-cols-2">
        <div className="p-6 bg-white rounded-lg shadow">
          <h3 className="mb-4 text-lg font-semibold">English Information</h3>
          <div className="space-y-3">
            <div>
              <span className="font-medium">Name:</span>
              <p className="text-gray-700">{product.name.en}</p>
            </div>
            <div>
              <span className="font-medium">Description:</span>
              <p className="leading-relaxed text-gray-700">{product.description.en}</p>
            </div>
          </div>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h3 className="mb-4 text-lg font-semibold">French Information</h3>
          <div className="space-y-3">
            <div>
              <span className="font-medium">Nom:</span>
              <p className="text-gray-700">{product.name.fr}</p>
            </div>
            <div>
              <span className="font-medium">Description:</span>
              <p className="leading-relaxed text-gray-700">{product.description.fr}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Product Form Page
const ProductFormPage = () => {
  const { gtin } = useParams();
  const navigate = useNavigate();
  const isEditing = !!gtin;

  const [companies, setCompanies] = useState([]);
  const [formData, setFormData] = useState({
    gtin: '',
    company_id: '',
    name_en: '',
    name_fr: '',
    description_en: '',
    description_fr: '',
    brand: '',
    country_of_origin: 'France',
    gross_weight: '',
    net_weight: '',
    weight_unit: 'g',
    is_hidden: false
  });

  const [selectedFile, setSelectedFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchCompanies();
    if (isEditing) {
      fetchProduct();
    }
  }, [gtin, isEditing]);

  const fetchCompanies = async () => {
    try {
      const data = await api.getActiveCompanies();
      setCompanies(data);
    } catch (error) {
      console.error('Error fetching companies:', error);
    }
  };

  const fetchProduct = async () => {
    try {
      const product = await api.getAdminProduct(gtin);
      setFormData({
        gtin: product.gtin,
        company_id: product.company.id,
        name_en: product.name.en,
        name_fr: product.name.fr,
        description_en: product.description.en,
        description_fr: product.description.fr,
        brand: product.brand,
        country_of_origin: product.countryOfOrigin,
        gross_weight: product.weight.gross,
        net_weight: product.weight.net,
        weight_unit: product.weight.unit,
        is_hidden: product.isHidden
      });
    } catch (error) {
      setError('Error loading product data');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const submitData = new FormData();
      Object.keys(formData).forEach(key => {
        submitData.append(key, formData[key]);
      });

      if (selectedFile) {
        submitData.append('image', selectedFile);
      }

      if (isEditing) {
        await api.updateProduct(gtin, submitData);
      } else {
        await api.createProduct(submitData);
      }
      navigate('/admin/products');
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleFileChange = (e) => {
    setSelectedFile(e.target.files[0]);
  };

  return (
    <div className="max-w-4xl px-4 py-8 mx-auto">
      <h1 className="mb-8 text-3xl font-bold text-gray-900">
        {isEditing ? 'Edit Product' : 'Add New Product'}
      </h1>

      {error && (
        <div className="px-4 py-3 mb-6 text-red-700 bg-red-100 border border-red-400 rounded">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-8">
        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Basic Information</h2>
          <div className="grid gap-6 md:grid-cols-2">
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                GTIN *
              </label>
              <input
                type="text"
                name="gtin"
                value={formData.gtin}
                onChange={handleChange}
                disabled={isEditing}
                required
                pattern="\d{13,14}"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100"
                placeholder="13-14 digits"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Company *
              </label>
              <select
                name="company_id"
                value={formData.company_id}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Select a company</option>
                {companies.map(company => (
                  <option key={company.id} value={company.id}>
                    {company.company_name}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Brand *
              </label>
              <input
                type="text"
                name="brand"
                value={formData.brand}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Country of Origin *
              </label>
              <input
                type="text"
                name="country_of_origin"
                value={formData.country_of_origin}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">English Information</h2>
          <div className="space-y-6">
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Product Name (English) *
              </label>
              <input
                type="text"
                name="name_en"
                value={formData.name_en}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Description (English) *
              </label>
              <textarea
                name="description_en"
                value={formData.description_en}
                onChange={handleChange}
                required
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">French Information</h2>
          <div className="space-y-6">
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Product Name (French) *
              </label>
              <input
                type="text"
                name="name_fr"
                value={formData.name_fr}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Description (French) *
              </label>
              <textarea
                name="description_fr"
                value={formData.description_fr}
                onChange={handleChange}
                required
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Weight Information</h2>
          <div className="grid gap-6 md:grid-cols-3">
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Gross Weight *
              </label>
              <input
                type="number"
                step="0.01"
                name="gross_weight"
                value={formData.gross_weight}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Net Weight *
              </label>
              <input
                type="number"
                step="0.01"
                name="net_weight"
                value={formData.net_weight}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                Weight Unit *
              </label>
              <select
                name="weight_unit"
                value={formData.weight_unit}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="g">g (grams)</option>
                <option value="kg">kg (kilograms)</option>
                <option value="ml">ml (milliliters)</option>
                <option value="L">L (liters)</option>
                <option value="oz">oz (ounces)</option>
                <option value="lb">lb (pounds)</option>
              </select>
            </div>
          </div>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="mb-4 text-xl font-semibold">Product Image</h2>
          <div>
            <label className="block mb-2 text-sm font-medium text-gray-700">
              Upload Image
            </label>
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
            <p className="mt-1 text-sm text-gray-500">
              Accepted formats: JPG, PNG, GIF. Max size: 5MB.
            </p>
          </div>
        </div>

        {isEditing && (
          <div className="p-6 bg-white rounded-lg shadow">
            <h2 className="mb-4 text-xl font-semibold">Visibility</h2>
            <div className="flex items-center">
              <input
                type="checkbox"
                id="is_hidden"
                name="is_hidden"
                checked={formData.is_hidden}
                onChange={handleChange}
                className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="is_hidden" className="block ml-2 text-sm text-gray-900">
                Hide this product from public view
              </label>
            </div>
          </div>
        )}

        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={() => navigate('/admin/products')}
            className="px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? 'Saving...' : (isEditing ? 'Update Product' : 'Create Product')}
          </button>
        </div>
      </form>
    </div>
  );
};

// Main App Component
const App = () => {
  return (
    <AuthProvider>
      <Router>
        <div className="min-h-screen bg-gray-50">
          <Navigation />

          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/gtin-verify" element={<GTINVerificationPage />} />
            <Route path="/01/:gtin" element={<PublicProductPage />} />

            {/* Admin Routes */}
            <Route path="/admin/companies" element={
              <ProtectedRoute><CompaniesListPage /></ProtectedRoute>
            } />
            <Route path="/admin/companies/new" element={
              <ProtectedRoute><CompanyFormPage /></ProtectedRoute>
            } />
            <Route path="/admin/companies/:id" element={
              <ProtectedRoute><CompanyDetailPage /></ProtectedRoute>
            } />
            <Route path="/admin/companies/:id/edit" element={
              <ProtectedRoute><CompanyFormPage /></ProtectedRoute>
            } />
            <Route path="/admin/products" element={
              <ProtectedRoute><ProductsListPage /></ProtectedRoute>
            } />
            <Route path="/admin/products/new" element={
              <ProtectedRoute><ProductFormPage /></ProtectedRoute>
            } />
            <Route path="/admin/products/:gtin" element={
              <ProtectedRoute><ProductDetailPage /></ProtectedRoute>
            } />
            <Route path="/admin/products/:gtin/edit" element={
              <ProtectedRoute><ProductFormPage /></ProtectedRoute>
            } />

            {/* Catch all route */}
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </div>
      </Router>
    </AuthProvider>
  );
};

export default App;
